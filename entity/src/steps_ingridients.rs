//! SeaORM Entity. Generated by sea-orm-codegen 0.9.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "steps_ingridients")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub step_id: i64,
    pub ingredient_id: i64,
    pub amount: f64,
    pub unit: String,
    pub annotation: Option<String>,
    pub inserted_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::ingredients::Entity",
        from = "Column::IngredientId",
        to = "super::ingredients::Column::Id",
        on_update = "Cascade",
        on_delete = "Restrict"
    )]
    Ingredients,
    #[sea_orm(
        belongs_to = "super::steps::Entity",
        from = "Column::StepId",
        to = "super::steps::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Steps,
}

impl Related<super::ingredients::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Ingredients.def()
    }
}

impl Related<super::steps::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Steps.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
