//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.4

use async_graphql::*;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Debug, Clone, Copy, PartialEq, Eq, EnumIter, DeriveActiveEnum, Serialize, Deserialize, Enum)]
#[sea_orm(rs_type = "String", db_type = "String(Some(4))")]
pub enum Role {
    #[sea_orm(string_value = "root")]
    Root,
    #[sea_orm(string_value = "user")]
    User,
}

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize, SimpleObject)]
#[sea_orm(table_name = "users")]
#[graphql(complex, concrete(name = "User", params()))]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub email: String,
    pub active: bool,
    pub encrypted_password: Option<String>,
    #[graphql(skip)]
    pub avatar: Option<String>,
    pub name: Option<String>,
    pub role: Role,
    pub inserted_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::recipes::Entity")]
    Recipes,
}

impl Related<super::recipes::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Recipes.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Clone, Debug, Serialize, Deserialize, SimpleObject)]
#[graphql(concrete(name = "UserAvatar", params()))]
pub struct AvatarVariants {
    pub thumb: String,
    pub original: String,
}

#[ComplexObject]
impl Model {
    pub async fn avatar(&self) -> Option<AvatarVariants> {
        if let Some(avatar) = &self.avatar {
            Some(AvatarVariants {
                thumb: format!("{}/thumb", avatar),
                original: avatar.clone(),
            })
        } else {
            None
        }
    }
}
